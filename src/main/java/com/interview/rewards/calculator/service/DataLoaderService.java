package com.interview.rewards.calculator.service;

import com.interview.rewards.calculator.constants.RewardsCalculatorConstants;
import com.interview.rewards.calculator.model.Customer;
import com.interview.rewards.calculator.model.Transaction;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**

 This service class is responsible for loading initial data to the database upon application start up using the @PostConstruct annotation.
 The data generated in this method includes 50 customers and their corresponding transaction details for the past three months.
 The transaction amount is randomly generated using the java.util.Random class, and the transaction dates are generated by adding one month to the previous month's date.
 The data is then saved using the customerService and transactionService methods saveAll().
 */
@Service
public class DataLoaderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerService.class);

    private final CustomerService customerService;

    public DataLoaderService(CustomerService customerService) {
        this.customerService = customerService;
    }

    @PostConstruct
    public void loadData() throws IOException {
        List<Customer> customers = new ArrayList<>();
        // Generate 50 customer objects
        for (int i = 1; i <= RewardsCalculatorConstants.NUM_CUSTOMERS; i++) {
            Customer customer = new Customer();
            customer.setId(Integer.toUnsignedLong(i));
            customer.setName("Customer " + i);
            customers.add(customer);
        }
        // Save the generated customers to the database
        //customerService.saveAll(customers);

        // Generate transaction details for each customer for the past three months
        Random random = new Random();
        LocalDate startDate = LocalDate.now().minusMonths(RewardsCalculatorConstants.MONTHS_TO_GENERATE);
        LocalDate endDate = LocalDate.now();

        for (Customer customer : customers) {
            List<Transaction> transactions = new ArrayList<>();
            for (LocalDate date = startDate; date.isBefore(endDate); ) {
                BigDecimal amount = new BigDecimal(random.nextInt(RewardsCalculatorConstants.TRANSACTION_AMOUNT_MAX));
                Transaction transaction = new Transaction();
                transaction.setCustomer(customer);
                transaction.setAmount(amount);
                transaction.setDate(date.toString());
                transactions.add(transaction);

                // Add 1 month to the date
                date = date.plusMonths(1);
            }
            customer.setTransactions(transactions);
        }

        // Save the generated transactions to the database
        customerService.saveAll(customers);
    }
}
